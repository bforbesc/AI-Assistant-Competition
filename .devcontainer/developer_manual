# Developer Manual

This document guides you through the process of setting up, running, and contributing to the **AI-Assistant-Competition** platform using our DevContainer. By encapsulating dependencies, tooling, and environment configuration in a container, we ensure that every developer—regardless of host OS—has a reproducible, fully-featured workspace.

---

## 1. Prerequisites & Rationale

Before launching the container, you need:

- **Docker Engine** (20.10+): container runtime.  
- **VS Code** with **Remote – Containers**: develop inside containers.  
- **Git CLI**: branch management and PRs.

> **Why containers?**  
> Containers eliminate “it works on my machine” by bundling Python, Node.js, database clients, and CLI tools into one image.

---

## 2. DevContainer Configuration

All settings live in `.devcontainer/devcontainer.json`:

- **Base Image**: Microsoft’s Python 3.10 image plus Docker-in-Docker and Node.js.  
- **Features & Extensions**: PostgreSQL client, `black`, `flake8` for code style.  
- **PostCreate Command**: runs `.devcontainer/setup.sh` to bootstrap environment variables and optionally initialize the database.

If you need to tweak resource limits, add VS Code extensions, or install extra tools, update `devcontainer.json` here and commit.

---

## 3. Launching Your DevContainer

1. **Clone the repo** (if not already):
   ```bash
   git clone https://github.com/your-org/AI-Assistant-Competition.git
   cd AI-Assistant-Competition

Open in VS Code and click Reopen in Container.

Wait for the image build (first run may take a few minutes).

python --version    # Python 3.10.x
node --version      # matches devcontainer.json
psql --version      # PostgreSQL client installed


## 4. Environment Variables

Copy and edit the example .env at the workspace root:
cp .env.example .env

Set:

DATABASE_URL (e.g. postgres://user:pass@localhost:5432/ai_assistant_competition)

SECRET_KEY (random 32-char string)

Security: .env is git-ignored—never commit real credentials.

## 5. Database Initialization

## 5.1 Installing PostgreSQL

On macOS (Homebrew):

brew install postgresql
brew services start postgresql

On Windows: download the installer from postgresql.org and follow the wizard.

On Ubuntu/Debian:

sudo apt update
sudo apt install postgresql postgresql-contrib
sudo systemctl start postgresql
sudo systemctl enable postgresql
``` :contentReference[oaicite:0]{index=0}:contentReference[oaicite:1]{index=1}

### 5.2 Create Database  
```bash
createdb ai_assistant_competition

psql -U postgres -c "CREATE DATABASE ai_assistant_competition;"
``` :contentReference[oaicite:2]{index=2}:contentReference[oaicite:3]{index=3}

### 5.3 Create Tables  
```bash
psql -d ai_assistant_competition -f Tables_AI_Negotiator.sql
psql -d ai_assistant_competition -f Populate_Tables_AI_Negotiator.sql  # optional seed data
``` :contentReference[oaicite:4]{index=4}:contentReference[oaicite:5]{index=5}

### 5.4 Configure Streamlit Secrets  
Edit `streamlit/.streamlit/secrets.toml` to point at your local DB:
```toml
database = "postgresql://localhost/ai_assistant_competition"

Other API keys (e.g. Google Drive) also belong here. 

## 5.5 Test Database Connection

psql -d ai_assistant_competition -c "SELECT 'Connection successful' AS status;"
psql -U YOUR_USERNAME -d ai_assistant_competition -c "SELECT 'Connection successful' AS status;"
``` :contentReference[oaicite:8]{index=8}:contentReference[oaicite:9]{index=9}

### 5.6 Database Management

- **Adding Users** (via `add_user_interactive.py` script—handles password hashing):
  ```bash
  pip install psycopg2-binary python-dotenv
  python add_user_interactive.py

*Viewing tables*
psql -d ai_assistant_competition
\dt
SELECT * FROM user_;

*Backup*
pg_dump ai_assistant_competition > backup.sql

## 5.7 Delete & Uninstall

*Drop DB:*
psql -c "SELECT pg_terminate_backend(pid)
         FROM pg_stat_activity
         WHERE datname='ai_assistant_competition';"
dropdb ai_assistant_competition

*Uninstall PostgreSQL(macOS)*
brew services stop postgresql
brew uninstall postgresql
rm -rf /usr/local/var/postgres

(Windows: use Control Panel; Ubuntu/Debian: sudo apt purge PostgreSQL)

## 5.8 - Troubleshooting

If connection fails:

Is PostgreSQL running? (brew services list / systemctl status postgresql)

Is DATABASE_URL and script’s connection string correct?

Do you have proper permissions?

If CI checks flag broken links in secrets.toml, ensure your TOML syntax is valid. 

## 6. Installing Dependencies

pip install --upgrade pip
pip install -r requirements.txt
npm install
If you add a package, update requirements.txt or package.json and rebuild the container.

## 7. Running the application

streamlit run app/main.py

URL: http://localhost:8501
Live reload: edits under app/ hot-reload; restart if you change env vars.

## 8. Testing & Quality Assurance 

pytest --cov=app
flake8
black --check .

## 9. Contribution Workflow
Branch off main (e.g. feature/xyz).

Commit with conventional messages (feat(), fix(), docs()).

Push & open PR targeting main, describe what, why, how to test, and assign reviewers.

Iterate on feedback in the same branch; merge once CI passes and approvals are in.

Thank you for contributing to a dependable, easy-to-onboard development experience!
